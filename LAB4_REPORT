Thinking 4.1

(1)子进程完全按照fork()后的父进程代码执行，说明子进程内的数据和代码都是从父进程"拷贝"过来的，与父进程完全相同。
只有少数代表进程信息的数据与父进程不同。

(2)虽然子进程的代码段和数据段与执行fork时的父进程相同，但子进程并不从头开始执行，而是从父进程的epc位置开始执行。
在我们的实验中，sys_env_alloc这个系统调用函数负责创建子进程，其中的e->env_tf.pc = e->env_tf.cp0_epc语句将父进程
控制块中的epc值作为子进程的pc值，即子进程会从父进程epc处开始执行父进程代码。

Thinking 4.2

C正确。调用fork函数时，系统会进入内核态来执行相关的系统调用函数创建子进程。这时，父进程返回后将要执行的代码位置被放在epc中。
同时，创建子进程时，子进程的pc值被赋为父进程的epc值，故父子进程只会执行一次fork。
在父进程中，fork函数内相应的变量被赋予了子进程的id值。而在子进程中，这个变量被赋值为寄存器v0的值，寄存器v0的值在创建子进程时被赋为0。故在两个进程中各产生一个返回值。

Thinking 4.3

通过观察内存布局图发现，UTOP是用户空间可访问的最大地址(ULIM是用户空间最大地址，二者不同)。故duppage作用的地址空间肯定小于UTOP。
同时，UTOP下面的一页是user exception stack，这是每个进程都独有的用户异常栈。在fork函数中，会为子进程申请一页作为user exception stack
并且映射到子进程的页表中，故这一页不需要duppgae处理。所以，duppage保护的范围是到UTOP - BY2PG。

Thinking 4.4

(1)
vpt和vpd在mmu中定义:
extern volatile Pte* vpt[];
extern volatile Pde* vpd[];

vpt和vpd的值在user/entry.S中被定义为:
vpt:
  .word UVPT
  .global vpd
vpd:
  .word (UVPT+(UVPT>>12)*4)
  
vpt的值被赋为存储UVPT值的地址，通过mmu.h中的内存布局图可知，UVPT是进程页表的起始地址。而vpd则是页目录的起始地址值的地址。
所以，遍历vpd就相当于遍历页目录，同理，遍历vpt相当于遍历二级页表。
vpd和vpt宏的使用方式: (*vpt)[N]就相当于UVPT[N],根据N值的不同即可遍历页目录项或二级页表项。

(2)
